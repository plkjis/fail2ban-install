#!/bin/bash

# ==============================================================================
#
#          专家级 Fail2ban 安装与配置脚本 (Debian / Ubuntu)
#
# 特性:
#   - 健壮性: 任何命令失败时自动退出。
#   - 用户友好: 带有颜色提示和严格的输入验证。
#   - 现代化: 默认使用 systemd 日志后端，无需 rsyslog。
#   - 结构化: 使用函数封装逻辑，代码清晰易读。
#   - 幂等性: 可安全地重复运行。
#
# ==============================================================================

# --- 脚本设置 ---
# set -e: 当任何命令返回非零退出码时，立即退出脚本。
# set -o pipefail: 在管道中，只要有任何一个命令失败，整个管道的退出码就为非零。
set -e
set -o pipefail

# --- 颜色和消息函数，用于提供清晰的反馈 ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'

# 封装消息打印，让输出更整洁
msg_info() { echo -e "${C_BLUE}INFO:${C_RESET} $1"; }
msg_success() { echo -e "${C_GREEN}SUCCESS:${C_RESET} $1"; }
msg_warning() { echo -e "${C_YELLOW}WARNING:${C_RESET} $1"; }
msg_error() { echo -e "${C_RED}ERROR:${C_RESET} $1" >&2; exit 1; }

# --- 逻辑函数 ---

# 1. 检查是否以 root 权限运行
check_root() {
    msg_info "正在检查 root 权限..."
    if [ "$(id -u)" -ne 0 ]; then
        msg_error "此脚本必须以 root 权限运行。请尝试使用 'sudo bash $0'。"
    fi
}

# 2. 获取用户配置，并进行严格验证
get_user_settings() {
    msg_info "开始配置 SSH 防护参数..."

    # 检测当前 SSH 端口
    local current_ssh_port
    current_ssh_port=$(grep -i '^Port' /etc/ssh/sshd_config | awk '{print $2}' | head -n 1)
    [ -z "$current_ssh_port" ] && current_ssh_port=22

    read -p "请输入您的 SSH 端口 (默认为: ${current_ssh_port}): " ssh_port
    ssh_port=${ssh_port:-${current_ssh_port}}

    # 循环验证 maxretry 输入
    while true; do
        read -p "请输入最大登录重试次数 (2-10, 默认为 3): " maxretry
        maxretry=${maxretry:-3}
        if [[ "$maxretry" =~ ^[0-9]+$ ]] && [ "$maxretry" -ge 2 ] && [ "$maxretry" -le 10 ]; then
            break
        else
            echo -e "${C_YELLOW}输入无效，请输入一个 2 到 10 之间的整数。${C_RESET}"
        fi
    done

    # 循环验证 bantime 输入
    while true; do
        read -p "请输入封禁 IP 的时长 (单位: 小时, 默认为 24): " bantime_hours
        bantime_hours=${bantime_hours:-24}
        if [[ "$bantime_hours" =~ ^[0-9]+$ ]] && [ "$bantime_hours" -gt 0 ]; then
            break
        else
            echo -e "${C_YELLOW}输入无效，请输入一个正整数。${C_RESET}"
        fi
    done

    bantime_seconds=$((bantime_hours * 3600))
}

# 3. 安装必要的软件包
install_packages() {
    if command -v fail2ban-server &> /dev/null; then
        msg_info "Fail2ban 已安装，跳过安装步骤。"
    else
        msg_info "正在更新软件包列表并安装 Fail2ban..."
        apt-get update
        apt-get install -y fail2ban
        msg_success "Fail2ban 安装成功。"
    fi
}

# 4. 创建并写入配置文件
configure_fail2ban() {
    local config_file="/etc/fail2ban/jail.d/sshd-modern.local"
    msg_info "正在创建现代化配置文件: ${config_file}"

    cat <<EOF > "${config_file}"
# This file was generated by a setup script.
# It configures the SSH jail to use the systemd journal for logging.
[sshd]
enabled  = true
backend  = systemd
port     = ${ssh_port}
maxretry = ${maxretry}
bantime  = ${bantime_seconds}s
EOF
}

# 5. 重启并验证服务
restart_and_verify() {
    msg_info "正在启用并重启 Fail2ban 服务..."
    systemctl enable fail2ban
    systemctl restart fail2ban

    msg_info "等待 2 秒以确保服务稳定..."
    sleep 2

    if systemctl is-active --quiet fail2ban; then
        msg_success "Fail2ban 服务已成功启动并正在运行！"
    else
        msg_error "Fail2ban 服务启动失败。请运行 'journalctl -u fail2ban -n 50' 查看日志。"
    fi
}

# --- 主函数 ---
main() {
    check_root
    get_user_settings

    # 显示配置摘要供用户最终确认
    echo "----------------------------------------"
    echo -e "${C_YELLOW}配置摘要:${C_RESET}"
    echo "  SSH 端口:     ${ssh_port}"
    echo "  最大重试次数: ${maxretry}"
    echo "  封禁时长:     ${bantime_hours} 小时 (${bantime_seconds} 秒)"
    echo "  日志后端:     systemd (现代化方式)"
    echo "----------------------------------------"
    read -p "确认以上配置并继续吗? (y/n): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        echo -e "${C_RED}操作已取消。${C_RESET}"
        exit 0
    fi

    install_packages
    configure_fail2ban
    restart_and_verify

    # 提供最终的成功信息和检查命令
    echo -e "\n${C_GREEN}===================================================${C_RESET}"
    msg_success "安装与配置全部完成！您的 SSH 服务已受保护。"
    echo -e "${C_YELLOW}您可以使用以下命令随时查看 SSH 防护的状态:${C_RESET}"
    echo -e "  sudo fail2ban-client status sshd"
    echo -e "${C_GREEN}===================================================${C_RESET}"
}

# --- 脚本入口 ---
main
